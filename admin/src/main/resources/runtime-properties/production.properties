# These settings override and append settings in:

# common-shared.properties
# production-shared.properties
# common.properties

# Please see common-shared.properties for more information on how the properties files work

password.admin.encoder=org.springframework.security.authentication.encoding.PlaintextPasswordEncoder
password.site.encoder=org.springframework.security.authentication.encoding.PlaintextPasswordEncoder

exception.showDebugMessage=false
blPU.hibernate.hbm2ddl.auto=none

# ############################################ #
# CONTENT MANAGEMENT - Asset Server Properties #
# ############################################ #

# Prefix used to indicate the url represents an asset being managed by the CMS.
asset.server.url.prefix.internal=cmsstatic
# When serving custom Pages or Structured Content fields, the url prefix defined
# above will be replaced with the string below.   This is useful for sites
# that have a separate image domain or use a CDN to render images.   This works well
# with CMS's that own the image part of your domain CNAME
#asset.server.url.prefix=http://localhost:8080/cmsstatic
asset.server.url.prefix=

# If left blank, the system will use the non secure url and replace the http with
# https.
asset.server.url.prefix.secure=

# The base path where file system assets will be stored.  Should begin but not end with a "/"   
# If not set, the system will use System.setProperty("java.io.tmpdir")
# deprecated :  should use asset.server.file.system.path instead
asset.server.file.system.path=/home/bitnami/assert

# If you want to use something besides java.io.tmp for your temp directory, you can set this property to the 
# directory where you want your temporary files to reside
file.service.temp.file.base.directory=/home/bitnami/tmp

# URLs for images and other assets will be stored efficiently on the filesystem using a set of 
# generated directories based on the md5 value of the filename.   The number below will be used
# to determine the number of directories created.   2 supports a distribution of about 10 million 
# files and is suitable for most purposes.   Upping to 3 would add support for over 2 billion.  But
# for implementations of this size, distributed file system options should be considered.
asset.server.max.generated.file.system.directories=1